@page "/clientPayments/addClientPayment"
@using PaymentTrackingSystem.Client.Infrastructure.Interface
@using PaymentTrackingSystem.Shared
@using Radzen
@using Radzen.Blazor
@using PaymentTrackingSystem.Common.Utils.ClientPaymentMessages

@inject IClientService ClientService
@inject IPaymentService PaymentService
@inject NavigationManager NavigationManager
@inject ILogger<Add> Logger
@rendermode @(new InteractiveAutoRenderMode(prerender:false))

<div class="container">
    <div class="row">
        <div class="col-md-8 mx-auto">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    Add Client Payments
                </div>
                <div class="card-body">
                    <div class="col-lg-12">
                        <EditForm Model="@clientPayment" OnValidSubmit="HandleValidSubmit">
                            @if (errorMessages != null)
                            {
                                @foreach (var message in errorMessages)
                                {
                                    if (!string.IsNullOrEmpty(message))
                                    {
                                        <ul class="alert alert-danger mt-3 text-left">
                                            <li>@message</li>
                                        </ul>
                                    }
                                }
                            }
                            <div class="row rowMargin">
                                <div class="col-sm-3">
                                    Amount
                                </div>
                                <div class="col-sm-6">
                                    <InputNumber @bind-Value="clientPayment.Amount" maxLength="150" class="form-control text-primary" />
                                </div>
                            </div>

                            <div class="row rowMargin">
                                <div class="col-sm-3">
                                    Client
                                </div>
                                <div class="col-sm-6">
                                    <RadzenStack Orientation="Orientation.Horizontal"
                                                 AlignItems="AlignItems.Center"
                                                 JustifyContent="JustifyContent.Center"
                                                 Gap="0.1rem">
                                        <RadzenLabel  Component="DropDownClear" />
                                  
                                        <RadzenDropDown @bind-Value=@value
                                                        Data=@ClientData
                                                        TextProperty="@nameof(ClientViewModel.FirstName)"
                                                        ValueProperty="ClientId"
                                                        AllowClear=true 
                                                        Placeholder="Select Client"
                                                        Style="width:500px;"
                                                        Change="HandleDropDownChange"
                                                        Name="DropDownClear" />
                                    </RadzenStack>
                                </div>
                            </div>
                            <div class="row rowMargin">
                                <div class="col-sm-3">
                                    Amount Transfered Date
                                </div>
                                <div class="col-sm-6">
                                    <InputDate 
                                        @bind-Value="clientPayment.AmountTransferedDate" 
                                        class="form-control" />
                                </div>
                            </div>
                            <div class="row rowMargin">
                                <div class="col-sm-3">
                                    Amount Interest
                                </div>
                                <div class="col-sm-6">
                                    <RadzenStack Orientation="Orientation.Horizontal"
                                                 AlignItems="AlignItems.Center"
                                                 JustifyContent="JustifyContent.Center"
                                                 Gap="0.1rem">
                                        <RadzenLabel Component="DropDownClear" />

                                        <RadzenDropDown @bind-Value=@interestRatevalue
                                                        Data=@interestRatesData
                                                        TextProperty="@nameof(InterestRates.AmountInterestRate)"
                                                        ValueProperty="InterestId"
                                                        AllowClear=true
                                                        Placeholder="Select Interest Rate"
                                                        Style="width:500px;color:red;"
                                                        Change="InterestRatesDropDownChange"
                                                        Name="DropDownClear" />
                                    </RadzenStack>

                                </div>
                            </div>

                            <div class="row rowMargin">
                                <div class="col-sm-3">
                                    Mothly Interest Amount
                                </div>
                                <div class="col-sm-6">
                                    <InputNumber  
                                        @bind-Value="@monthlyInterestAmount" readonly class="form-control text-danger" />
                                </div>
                            </div>
                            <div class="text-center">
                                <button type="submit" class="btn btn-primary  fw-bold">
                                    <i class="fas fa-plus" aria-hidden="true"></i>
                                    &nbsp;&nbsp;Add Payment
                                </button>
                                <button type="button" class="btn btn-warning fw-bold" @onclick="GoBack">
                                    <i class="fas fa-times"></i>&nbsp;&nbsp;Cancel
                                </button>
                            </div>

                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <div class="alert alert-success mt-3 text-center">@successMessage</div>
                            }
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ClientPaymentViewModel clientPayment = new();
    public List<ClientViewModel> ClientData = new List<ClientViewModel>();
    private string[] errorMessages;
    private string successMessage = string.Empty;
    public List<ClientViewModel> Clients = new List<ClientViewModel>();
    private int myNumber;
    decimal monthlyInterestAmount = 0;
    string? selectedInterestValue;
    int? value;
    int? interestRatevalue;
    private List<InterestRates> interestRatesData = new List<InterestRates>();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            ClientData = await ClientService.GetAllClients<List<ClientViewModel>>();
            interestRatesData =  GetAllInterestRates();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading data.");
        }
    }

    private void HandleDropDownChange(object selectedValue)
    {
        if (selectedValue != null)
        {
            clientPayment.ClientId = Convert.ToInt32(selectedValue.ToString());
            // Log the selected value to the console
            Console.WriteLine("Selected Value: " + clientPayment.ClientId);
        }
    }
    private void InterestRatesDropDownChange(object selectedValue)
    {
        if (selectedValue != null)
        {
            clientPayment.InterestRate = Convert.ToDecimal(selectedValue);
            monthlyInterestAmount = (Convert.ToDecimal(clientPayment.Amount) * Convert.ToDecimal(selectedValue) / 100);
        }
    } 

    private void HandleInterestRateChange(ChangeEventArgs e)
    {
        // e.Value will be an object, so cast appropriately
        if (decimal.TryParse(e.Value?.ToString(), out var newRate))
        {
            clientPayment.InterestRate = newRate;
            // Do something else with newRate
        }
    }

    private async void HandleValidSubmit()
    {
        errorMessages = Validations(clientPayment);
        string validations = string.Join(" ", errorMessages);
        if ((validations == null) || (validations == ""))
        {
            var response = await PaymentService.Add(clientPayment);
            if (response)
            {
                Logger.LogInformation(ClientPaymentValidationMessages.ClientAddPaymentSuccessMessage);
                successMessage = ClientPaymentValidationMessages.ClientAddPaymentSuccessMessage;              
                Reset();
            }
            else
            {
                Logger.LogInformation(ClientPaymentValidationMessages.ClientAddPaymentErrorMessage);
                successMessage = ClientPaymentValidationMessages.ClientAddPaymentErrorMessage;
            }
        }
        else
        {
            validations = "";
        }
    }
    private async void Reset()
    {
        clientPayment = new ClientPaymentViewModel();
        errorMessages = [];
        StateHasChanged();
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/client/clientList");
    }

    private string[] Validations(ClientPaymentViewModel client)
    {
        string[] result;
        string validationMessage = "";
        if (client.Amount == null)
        {
            validationMessage = ClientPaymentValidationMessages.Amount;
        }
        if (client.ClientId == null)
        {
            validationMessage = validationMessage != null ? validationMessage +
                                ", " + Environment.NewLine + ClientPaymentValidationMessages.ClientId
                                : ClientPaymentValidationMessages.ClientId;
        }
        if (client.AmountTransferedDate == null)
        {
            validationMessage = validationMessage != null
                                ? validationMessage + ", " + Environment.NewLine + ClientPaymentValidationMessages.AmountTransferedDate
                                : ClientPaymentValidationMessages.AmountTransferedDate;
        }
        if (client.InterestRate == null)
        {
            validationMessage = validationMessage != null
                                ? validationMessage + ", " + Environment.NewLine + ClientPaymentValidationMessages.InterestRate
                                : ClientPaymentValidationMessages.InterestRate;
        }      
        return result = validationMessage.Split(',').Select(s => s.Trim()).ToArray();
    }

    public List<InterestRates>GetAllInterestRates()
    {
        var Rates = new List<InterestRates>
        {
            new InterestRates
            {
                InterestId = 1,
                AmountInterestRate = "1"
            },
            new InterestRates
            {
                InterestId = 2,
                AmountInterestRate = "2"
            },
             new InterestRates
            {
                InterestId = 3,
                AmountInterestRate = "3"
            },
             new InterestRates
            {
                InterestId = 4,
                AmountInterestRate = "4"
            },
        };
        return Rates;
    }

    public class InterestRates
    {
        public int InterestId { get; set; }
        public string AmountInterestRate { get; set; }
    } 

}
